package connexion;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;

//BASED ON CODE FROM https://stackoverflow.com/questions/10131377/socket-programming-multiple-client-to-one-server
// ALL RIGHTS RESERVED

// SERVER

public class ConnectThread extends Thread{
	
	protected Socket socket;
	private volatile boolean value;
	public ConnectThread(Socket clientSocket) {
        this.socket = clientSocket;
    }
	
	public boolean getResult() {
		return value;
	}
	public void run() {
			{
			System.out.println("RUN");
			
			
			try {
				//get client username + password + client port and check if they exist
				ObjectInputStream OinClient = new ObjectInputStream(socket.getInputStream());
				
				String clientInfo = OinClient.readUTF();
				String parts[] = clientInfo.split(";");
				
				String username = parts[0];
				String pwd = parts[1];
				int port = Integer.parseInt(parts[2]);
				
				boolean result = false;
				result = checkClient(username, pwd, port);
				
				if(result == true)
				{
					//send client list of available files with their respectives owners / IP numbers
					fileManager.FileManager files = new fileManager.FileManager();
					
					ObjectOutputStream OoutListClients = new ObjectOutputStream(socket.getOutputStream());
					
					String[][] availableFiles = files.GetAvailableFiles(username);
					
					OoutListClients.writeObject(availableFiles);
					
					OoutListClients.flush();
					
					OoutListClients.close();
				
					OinClient.close();
				}
				else
				{
					ObjectOutputStream OoutListClients = new ObjectOutputStream(socket.getOutputStream());
					
					String[][] availableFiles = new String[1][1];
					availableFiles[0][0] = "failed connection";
					
					OoutListClients.writeObject(availableFiles);
					
					OoutListClients.flush();
					
					OoutListClients.close();
				
					OinClient.close();
					
				}
							
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}	
		}
	}
	
	public void writeDBConnect(String username, int connectDigit, int port) { //MUST BE SERVER SIDE
		
		String FILENAME = "../FileShareServer/src/db/db";
		fileManager.FileManager files = new fileManager.FileManager();
		int nbLines = files.getNumberLines();
				
		//write in db.txt that the client is connected
		try {			
			FileReader frDB = new FileReader(FILENAME);
			BufferedReader brDB = new BufferedReader(frDB);							
			String[] toWrite = new String[nbLines];
			
			//loop through file and find the line to replace
			for(int i = 0; i<nbLines; i++)
			{
				String[] parts = brDB.readLine().split(";");	
				if(parts[0].equals(username))
				{				
					if(connectDigit == 1)
					{
						parts[5] = "1";
						parts[4] = Integer.toString(port);
						
					}					
					else
					{
						parts[5] = "0";		
						parts[4] = Integer.toString(port);
					}
							
				}	
				
				toWrite[i] = parts[0] + ";" + parts[1] + ";" + parts[2] + ";" + parts[3] + ";" + parts[4] + ";" + parts[5];
			}
			
			//fill file with lines to write
			FileWriter fw = new FileWriter(FILENAME);
			BufferedWriter bw = new BufferedWriter(fw);
			
			for(int i = 0; i<nbLines;i++)
			{
				bw.write(toWrite[i]);
				bw.newLine();
			}
			
			//close all streams
			bw.flush();
			fw.close();
			bw.close();

		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}
	
	public boolean checkClient(String username, String pwd, int port) { //MUST BE SERVER SIDE
		//src = https://www.mkyong.com/java/how-to-read-file-from-java-bufferedreader-example/
		BufferedReader brLine = null;
		FileReader frLine = null;
		String FILENAME = "../FileShareServer/src/db/db";
		
		Boolean result = false;

		try {
			frLine = new FileReader(FILENAME);
			brLine = new BufferedReader(frLine);
			
			//count lines
			int nbLines = 0;
			while (brLine.readLine() != null) nbLines++;
			
			FileReader frCheck = new FileReader(FILENAME);
			BufferedReader brCheck = new BufferedReader(frCheck);

			for(int i = 0;i<nbLines;i++)
			{
				String[] parts = brCheck.readLine().split(";");
				String usernameToTest = parts[0];
				String pwdToTest = parts[1]; 

				if(usernameToTest.equals(username) && pwdToTest.equals(pwd))
				{
					String newText = parts[0] + ";" + parts[1] + ";" + parts[2] + ";" + parts[3] + ";" + port + ";" + 1; 
					String oldText = parts[0] + ";" + parts[1] + ";" + parts[2] + ";" + parts[3] + ";" + parts[4] + ";" + 0; 
					writeDBConnect(username, 1, port);
					return true;
				}				
			}
			
			frCheck.close();
			brCheck.close();
		} catch (IOException e) {

			e.printStackTrace();

		} finally {

			try {

				if (brLine != null)
					brLine.close();

				if (frLine != null)
					frLine.close();

			} catch (IOException ex) {

				ex.printStackTrace();
			}
		}		
		return result;
	}
	
}
