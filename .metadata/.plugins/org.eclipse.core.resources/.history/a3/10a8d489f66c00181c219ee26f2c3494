package interfaces;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

import connexion.ServerConnexion;

public class HomeInterface extends JFrame implements ActionListener{

	JButton btnStartServer = new JButton("Start the server");
	JButton btnCloseServer = new JButton("Stop the Server");
	public JLabel lblServer = new JLabel("Offline");
	public JLabel lblError = new JLabel("");
	
	ImageIcon greenLight = new ImageIcon(new ImageIcon("../FileShareServer/src/img/green-light.png")
    		.getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));
    
    ImageIcon redLight = new ImageIcon(new ImageIcon("../FileShareServer/src/img/red-light.png")
    		.getImage().getScaledInstance(20, 20, Image.SCALE_DEFAULT));

	JLabel greenLightLbl = new JLabel(greenLight);
	JLabel redLightLbl = new JLabel(redLight);
	
	ServerConnexion sConnect = new ServerConnexion();
	
	public HomeInterface() {
		setPreferredSize(new Dimension(500,300));
		JPanel panel = new JPanel(new GridBagLayout());
		GridBagConstraints constraints = new GridBagConstraints();
        constraints.anchor = GridBagConstraints.WEST;
        constraints.insets = new Insets(10, 10, 10, 10);
        
        
        
        JLabel greenLightLbl = new JLabel(greenLight);
		JLabel redLightLbl = new JLabel(redLight);
		
		constraints.gridx = 1;
		constraints.gridy = 0;
		panel.add(lblServer, constraints);
		
		constraints.gridx = 2;
		panel.add(btnStartServer, constraints);
		
		constraints.gridy = 1;
		panel.add(btnCloseServer, constraints);
		
		constraints.gridx = 2;
		constraints.gridy = 2;
		panel.add(lblError, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 1;
		panel.add(greenLightLbl, constraints);
		
		constraints.gridy = 0;
		panel.add(redLightLbl, constraints);
			
		btnStartServer.addActionListener(this);
		btnCloseServer.addActionListener(this);
		
		add(panel);
		pack();
		
		greenLightLbl.setVisible(false);
	}
	
	public void actionPerformed(ActionEvent e) {		
		
		Thread thread = new Thread()
		{
		    public void run()
		    {
		    	sConnect.connectServer();
		    }
		};
		
		if(e.getSource() == btnStartServer)
		{
			if((String)lblServer.getText() == "Offline")
			{
				lblServer.setText("Online");
				greenLightLbl.setVisible(true);
				redLightLbl.setVisible(false);
				thread.start();
			}
				
			else
				lblError.setText("The server has already started.");						
		}
		
		if(e.getSource() == btnCloseServer)
		{
			if((String)lblServer.getText() == "Online")
			{
				lblServer.setText("Offline");
				greenLightLbl.setVisible(false);
				redLightLbl.setVisible(true);
				
				sConnect.shutDown();
				thread.interrupt();
				
				try {
					thread.join();
				} catch (InterruptedException e1) {
					// TODO Auto-generated catch block
					e1.printStackTrace();
				}
				
				
			}				
			else
				lblError.setText("The server hasn't started yet.");
		}		
	}
}
