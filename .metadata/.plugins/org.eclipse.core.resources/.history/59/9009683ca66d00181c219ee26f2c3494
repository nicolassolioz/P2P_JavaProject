package interfaces;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.net.DatagramSocket;
import java.net.ServerSocket;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

public class HomeInterface extends JFrame implements ActionListener {

	private JLabel lblUsername = new JLabel("Username : ");
	private JLabel lblPassword = new JLabel("Password : ");
	private JLabel lblError = new JLabel("");
	
	private JTextField txtUsername = new JTextField(20);
	private JTextField txtPassword = new JTextField(20);
	
	private JButton btnConnect = new JButton("Connect");
	private JButton btnRegister = new JButton("Register");
	
	public HomeInterface() {
		setPreferredSize(new Dimension(500,300));
		JPanel panel = new JPanel(new GridBagLayout());
		
		GridBagConstraints constraints = new GridBagConstraints();
        constraints.anchor = GridBagConstraints.WEST;
        constraints.insets = new Insets(10, 10, 10, 10);
		
		constraints.gridx = 0;
		constraints.gridy = 0;
		panel.add(lblUsername, constraints);
		
		constraints.gridx = 1;
		panel.add(txtUsername, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 1;
		panel.add(lblPassword, constraints);
		
		constraints.gridx = 1;
		panel.add(txtPassword, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 2;
		panel.add(btnConnect, constraints);
		
		constraints.gridx = 1;
		panel.add(btnRegister, constraints);
		
		constraints.gridx = 0;
		constraints.gridy = 3;
		constraints.gridwidth = 2;
		panel.add(lblError, constraints);
		
		//add event listeners to buttons
		
		btnConnect.addActionListener(this);
		btnRegister.addActionListener(this);
		add(panel);
		pack();
	}
	
	public void actionPerformed(ActionEvent e) {
			
        if(e.getSource() == btnConnect)
        {
        	client.Client client = new client.Client(txtUsername.getText(), txtPassword.getText());
    		connexion.ClientConnexion connect = new connexion.ClientConnexion();
    		
    		int port = 0;
    		
    		for(int i = 50000; i<50100; i++)
    		{
    			if(available(i))
    			{
    				
    			}
    		}
    		if (connect.checkClient(client) == true && port > 0) {  
    			
    			String[][] result = connect.connectClient(client);

    			new interfaces.ConnectedInterface(client, result).setVisible(true);
                this.setVisible(false);
 
    			
    		}
    		else
    		{
    			lblError.setText("incorrect username or password OR no available connexion");
    		}
    		
    		/*fileManager.FileManager files = new fileManager.FileManager();
    		files.GetAvailableFiles("joanna");*/
        }
        
        if(e.getSource() == btnRegister) {
        	new interfaces.RegisterInterface().setVisible(true);
        	this.setVisible(false);
        }
    }  
	
	// CODE TAKEN FROM https://stackoverflow.com/questions/434718/sockets-discover-port-availability-using-java
	// ALL RIGHTS RESERVED
	public static boolean available(int port) {
	    if (port < 50000 || port > 50099) {
	        throw new IllegalArgumentException("Invalid start port: " + port);
	    }

	    ServerSocket ss = null;
	    DatagramSocket ds = null;
	    try {
	        ss = new ServerSocket(port);
	        ss.setReuseAddress(true);
	        ds = new DatagramSocket(port);
	        ds.setReuseAddress(true);
	        return true;
	    } catch (IOException e) {
	    } finally {
	        if (ds != null) {
	            ds.close();
	        }

	        if (ss != null) {
	            try {
	                ss.close();
	            } catch (IOException e) {
	                /* should not be thrown */
	            }
	        }
	    }

	    return false;
	}
}
